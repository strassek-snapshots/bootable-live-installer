#!/bin/busybox sh

PATH=/sbin:/bin:/usr/bin:/usr/sbin:/system/bin:/system/xbin; export PATH

# Mount things needed by this script
busybox mount -t proc proc /proc
busybox mount -t sysfs sys /sys

# install busybox applets as symlinks
busybox --install -s

# populate /dev
echo /sbin/mdev > /proc/sys/kernel/hotplug
mdev -s
sleep 3
mkdir -p /dev/block

echo 0 > /proc/sys/kernel/printk

find_root()
{
	# Check the device node
	if [ ! -e $1 ]; then
	   return 1
	fi

	blk=`basename $1`
	if [ ! -e /dev/block/$blk ]; then
		ln $1 /dev/block
	fi

	dev=/dev/block/$blk

	# try mounting it and verify needed files
	mount -o ro $dev /mnt 2> /dev/null || return 1

	if [ ! -e /mnt/ramdisk.img ]; then
		umount /mnt
		return 1
	fi

	if [ -n "$LIVE" ]; then
		# should find system.sfs
		if [ ! -e /mnt/system.sfs ]; then
			umount /mnt
			found=0
			return 1
		fi
		# should find vendor.sfs
		if [ ! -e /mnt/vendor.sfs ]; then
			umount /mnt
			found=0
			return 1
		fi
	fi

	found=1

	export ROOT=`echo $blk | sed -e "s/[0-9]*$//"`

	zcat /mnt/ramdisk.img | cpio -id
	mkdir -p /tmp/system-sq /tmp/vendor-sq

	if [ -n "$LIVE" ]; then
		mount -o loop,ro /mnt/system.sfs /tmp/system-sq
		mount -o loop,ro /tmp/system-sq/system.unsparse system
		mount -o loop,ro /mnt/vendor.sfs /tmp/vendor-sq
		mount -o loop,ro /tmp/vendor-sq/vendor.unsparse vendor
	fi

	mkdir -p mnt
}

find_system()
{
	# Check the device node
	if [ ! -e $1 ]; then
	   return 1
	fi

	blk=`basename $1`
	if [ ! -e /dev/block/$blk ]; then
		ln $1 /dev/block
	fi

	dev=/dev/block/$blk

	mkdir -p /mnt2

	if [ -n "$LIVE" ]; then
		found=1
	fi

	# try mounting it and verify needed files
	mount -o ro $dev /mnt2 2> /dev/null || return 1

	sysfnd=`cat /mnt2/build.prop 2> /dev/null | grep "ro.product.name" | cut -d"=" -f2`

	# In case of LIVE anyway we don't need this partition mounted
	# In case of normal boot, fstab will take care of mounting
	umount /mnt2

	if [ "$sysfnd" == "$product" ]; then
		if [ -n "$LIVE" ]; then
			# Found a system folder in live boot; we are upgrading
			export SYSTEM=`echo $blk | sed -e "s/[0-9]*$//"`
			found=1
		else
			found=2
		fi
	else
		return 1
	fi

	hash -r
	return 0
}

goto_shell()
{
		echo "($1) ... dropping to busybox ash."
		sh 2>&1
}

product=androidia_64
for c in `cat /proc/cmdline`; do
	case $c in
		androidboot.hardware=*)
			product="${c//androidboot.hardware=}"
			;;
	esac
done

mount -t tmpfs tmpfs /newroot
cd /newroot
found=0
for d in `ls /dev/[hms][dm][0-9a-z]*`; do
	find_root $d && break
done

if [ $found -eq 0 ]; then
	goto_shell find-root-fail
else
	# Find if we have a system folder
	found=0
	for d in `ls /dev/[hms][dm][0-9a-z]*`; do
		find_system $d && break
	done
fi

if [ $found -eq 0 ]; then
	goto_shell find-system-fail
fi

ln -s newroot/system /
ln -s newroot/vendor /
ln -s /vendor/lib/firmware /lib
mkdir -p /lib/modules
ln -s /vendor/lib/modules /lib/modules/`uname -r`

# load scripts
for s in `ls /scripts/*`; do
	test -e "$s" && source $s
done

if [ -n "$INSTALL" -o -n "$DEBUG" ]; then
       modprobe atkbd hid-apple
fi

if [ -n "$DEBUG" ]; then
	goto_shell debug-shell
fi

if [ -n "$INSTALL" ]; then
	do_install "$BUILDDATE" || goto_shell install-failed

	echo -n "Rebooting in 3 .. ";sleep 1
	echo -n "2 .. "; sleep 1
	echo "1"; sleep 1
	reboot -f
fi

load_ext_modules

# Otherwise fstab will take care
if [ -n "$LIVE" ]; then
	# update fstab to only have minimal fstab as everything
	# is already mounted differently in LIVE boot
	sed -i '/\/dev\/block\//d' fstab.$product
	mount_data
fi

# Disable mdev before switching to Android.
# It conflicts with Android's init
echo > /proc/sys/kernel/hotplug

export ANDROID_ROOT=/system

exec switch_root /newroot /init

# avoid kernel panic
goto_shell fatal-err
